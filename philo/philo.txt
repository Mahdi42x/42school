
Threads: (ein prozess der paralell ausgefuehrt werden kann)
pthread_create(): Zum Erstellen eines neuen Threads.
pthread_join(): Zum Warten auf die Beendigung eines Threads.
pthread_exit(): Zum Beenden des aktuellen Threads.
pthread_mutex_init(), pthread_mutex_lock(), pthread_mutex_unlock(): Zur Synchronisierung von Threads mit Mutexen (gegenseitiger Ausschluss).
pthread_cond_init(), pthread_cond_wait(), pthread_cond_signal(), pthread_cond_broadcast(): Zur Synchronisierung von Threads mit Bedingungsvariablen.

Mutex: (was ist das?)
Ein Mutex sorgt dafuer dass mehrere Threads nicht auf
die selbe Ressource zugreifen koennen, wenn dieser grad 
in benutzung ist. 
Heisst wenn Philo2 beide Gabeln benutzt, wird der Zugriff
der Gabeln die in benutzung sind fuer Philo1 und Philo2 gesperrt.

pthread_mutex_init(), pthread_mutex_lock(), pthread_mutex_unlock(): 
Zur Synchronisierung von Threads mit Mutexen (gegenseitiger Ausschluss).

wichtig: Ein Mutex muss am ende immer wieder freigegeben werden! 
-> pthread_mutex_destroy(&mutex);


t_rules:

Diese Struktur enthält die Regeln und Parameter für deine Philosophen-Simulation.
nb_philo: Die Anzahl der Philosophen.
time_death: Die Zeit, nach der ein Philosoph stirbt, wenn er nicht isst.
time_eat: Die Zeit, die ein Philosoph zum Essen benötigt.
time_sleep: Die Zeit, die ein Philosoph zum Schlafen benötigt.
all_ate: Ein Flag, das angibt, ob alle Philosophen mindestens einmal gegessen haben.
dieded: Ein Flag, das angibt, ob ein Philosoph gestorben ist.
first_timestamp: Ein Zeitstempel, der den Startzeitpunkt der Simulation speichert.
meal_check: Ein Mutex zum Schutz des Essenszählers.
forks: Ein Array von Mutexen, die die Gabeln darstellen, die von den Philosophen verwendet werden.
writing: Ein Mutex zum Schutz des Schreibens in die Konsole.
philosophers: Ein Array von t_philosopher-Strukturen, das die einzelnen Philosophen in der Simulation repräsentiert.
